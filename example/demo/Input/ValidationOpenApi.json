{
  "x-generator": "NSwag v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "My API",
    "description": "API functionalities.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:44361"
    },
    {
      "url": "http://localhost:44361"
    },
    {
      "url": "https://localhost:44361"
    }
  ],
  "paths": {
    "/api/Attachment": {
      "post": {
        "tags": [
          "Attachment"
        ],
        "summary": "Uploads an attachment.",
        "operationId": "Attachment_Post",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Content-Disposition",
            "in": "header",
            "required": true,
            "description": "The Filename.",
            "schema": {
              "type": "string",
              "pattern": "^attachment: filename=\".*\"$"
            }
          }
        ],
        "requestBody": {
          "x-name": "Request body",
          "description": "The attachment file.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The request was created successfully."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "406": {
            "description": "Provided Accept HTTP Header is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Provided Accept HTTP Header is not supported."
                }
              }
            }
          },
          "415": {
            "description": "The request entity has a media type which is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request entity has a media type which is not supported."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/Ledes": {
      "get": {
        "tags": [
          "InvoiceViewer"
        ],
        "summary": "Gets a ledes transformation request history.",
        "operationId": "LedesHistory_GetHistory",
        "parameters": [
          {
            "name": "InvoiceId",
            "in": "query",
            "description": "Gets or sets a producer's invoice id.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "PayorOrgId",
            "in": "query",
            "description": "Gets or sets an id of the payor organization.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "CallType",
            "in": "query",
            "description": "Gets or sets the type of the LEDES file.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Gets or sets a start date edge after which the invoice was submitted.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Gets or sets an end date edge before which the invoice was submitted.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "406": {
            "description": "Provided Accept HTTP Header is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Provided Accept HTTP Header is not supported."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      },
      "post": {
        "tags": [
          "InvoiceViewer"
        ],
        "summary": "Process a ledes transformation request.",
        "operationId": "Ledes_Post",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "text/plain",
                "application/octet-stream",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "OutputInvoiceType",
            "in": "query",
            "description": "Specifies the expected LEDES output type.",
            "schema": {
              "type": "string",
              "enum": [
                "Ledes98B",
                "Ledes98BI",
                "Ledes2000",
                "LedesXml20",
                "LedesXml21"
              ]
            }
          },
          {
            "name": "CallType",
            "in": "query",
            "description": "Specifies whether the LEDES file is the final or a preview one.",
            "schema": {
              "type": "string",
              "enum": [
                "Final",
                "Preview"
              ]
            }
          }
        ],
        "requestBody": {
          "x-name": "Request body",
          "description": "ESF payload (single-payor)",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The request was created successfully.",
            "content": {
              "application/json": {
                "example": "The payload xml."
              }
            }
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "406": {
            "description": "Provided Accept HTTP Header is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Provided Accept HTTP Header is not supported."
                }
              }
            }
          },
          "413": {
            "description": "Too large payload size.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Too large payload size."
                }
              }
            }
          },
          "415": {
            "description": "The request entity has a media type which is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request entity has a media type which is not supported."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/Ledes/{id}": {
      "get": {
        "tags": [
          "InvoiceViewer"
        ],
        "summary": "Gets the ledes request invoice payload.",
        "operationId": "Ledes_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier of a successfully created ledes request file.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "text/plain",
                "application/octet-stream",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details.",
            "content": {
              "application/json": {
                "example": "The payload xml."
              }
            }
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "406": {
            "description": "Provided Accept HTTP Header is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Provided Accept HTTP Header is not supported."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/Ledes/{invoiceId}/{payorOrgId}": {
      "get": {
        "tags": [
          "InvoiceViewer"
        ],
        "summary": "Gets the ledes request invoice payload by invoiceId and payorOrgId.",
        "operationId": "Ledes_GetLast",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "description": "The invoiceId of a successfully created ledes request file.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "payorOrgId",
            "in": "path",
            "required": true,
            "description": "The payorOrgId of a successfully created ledes request file.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "text/plain",
                "application/octet-stream",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details.",
            "content": {
              "application/json": {
                "example": "The payload xml."
              }
            }
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "406": {
            "description": "Provided Accept HTTP Header is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Provided Accept HTTP Header is not supported."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/ProducerData": {
      "get": {
        "tags": [
          "ProducerData"
        ],
        "summary": "Get the producer-specific data.",
        "operationId": "ProducerData_Get",
        "parameters": [
          {
            "name": "lastSyncDate",
            "in": "query",
            "description": "The latest date of synchronization process.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "application/xml",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/Search": {
      "post": {
        "tags": [
          "Status"
        ],
        "summary": "Create a search request.",
        "operationId": "InvoiceSearch_Post",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "x-name": "model",
          "description": "The PostSearchRequest.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PostSearchRequest"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/Invoice": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Gets the invoice status.",
        "operationId": "InvoiceStatus_Get",
        "parameters": [
          {
            "name": "PayorOrgId",
            "in": "query",
            "description": "Gets or sets an id of the payor org.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "PayorOrgEbillingId",
            "in": "query",
            "description": "Gets or sets an id of the ebilling payor org.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "SubmissionId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets an array of submission request ids.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            }
          },
          {
            "name": "InvoiceId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets an array of producer invoice ids.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "MatterId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets an array of matter ids.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Gets or sets a start date edge after which the invoice was submitted.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Gets or sets an end date edge before which the invoice was submitted.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "description": "Gets or sets a value whether the result selection will contain only invoices in active state.",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      },
      "put": {
        "tags": [
          "Status"
        ],
        "summary": "Updates the status.",
        "operationId": "InvoiceStatus_Update",
        "parameters": [
          {
            "name": "SubmissionId",
            "in": "query",
            "description": "Gets or sets the submission Id.",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            }
          },
          {
            "name": "InvoiceId",
            "in": "query",
            "description": "Gets or sets the invoice Id.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "PayorOrgId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets billing organization’s assigned payor organization identifiers.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PayorOrgEbillingId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets billing organization’s assigned payor organization identifiers.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "x-name": "statusData",
          "description": "The UpdateStatusDetailsRequest.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateStatusDetailsRequest"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request could not be processed because of conflict in the current state of the resource."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/Details": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Gets the invoice status details.",
        "operationId": "InvoiceStatusDetails_Get",
        "parameters": [
          {
            "name": "InvoiceId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets the invoice identifier.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "application/xml",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/History": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Gets the invoice status history.",
        "operationId": "InvoiceStatusHistory_Get",
        "parameters": [
          {
            "name": "SubmissionId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets the array of the submission Ids.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            }
          },
          {
            "name": "InvoiceId",
            "in": "query",
            "style": "form",
            "description": "Gets or sets the array of the invoice Ids.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1.0/SubmissionRequests/{submissionId}/invoices/{id}/attachments": {
      "post": {
        "tags": [
          "Submission"
        ],
        "summary": "Handles attachment association request.",
        "operationId": "SubmissionAttachments_Post",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "required": true,
            "description": "Submission request identifier.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Invoice identifier.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 2
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Invoice attachment association details.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AssociateSubmissionAttachmentRequest"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "The request was created successfully."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request could not be processed because of conflict in the current state of the resource."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/SubmissionRequests": {
      "post": {
        "tags": [
          "Submission"
        ],
        "summary": "Create a submission request.",
        "operationId": "SubmissionRequests_Post",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "x-name": "submissionRequest",
          "description": "The CreateSubmissionRequestRequest.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateSubmissionRequestRequest"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The request was created successfully."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "406": {
            "description": "Provided Accept HTTP Header is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Provided Accept HTTP Header is not supported."
                }
              }
            }
          },
          "413": {
            "description": "Too large payload size.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Too large payload size."
                }
              }
            }
          },
          "415": {
            "description": "The request entity has a media type which is not supported.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request entity has a media type which is not supported."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/v1/SubmissionRequests/{submissionId}/invoices/{id}/ready": {
      "put": {
        "tags": [
          "Submission"
        ],
        "summary": "Commits particular submission result to vendor.",
        "operationId": "SubmissionRequests_CommitInvoice",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "required": true,
            "description": "Submission request Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Invoice identifier.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 2
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successfully processed."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed because of conflict in the current state of the resource.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request could not be processed because of conflict in the current state of the resource."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    },
    "/api/Vendor": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Get all vendors.",
        "operationId": "Vendor_Get",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "description": "Specify certain media types which are acceptable for the response.",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "*/*"
              ]
            }
          },
          {
            "name": "ProducerId",
            "in": "header",
            "required": true,
            "description": "The Id of the producer submitting the request.  The ProducerId in the header must match the ProducerId passed in the original request body.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Provider",
            "in": "header",
            "required": true,
            "description": "The access token provided by your service provider.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user submitting the request.  This value is used for reporting purposes only.  Usernames are defined by the caller.",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. See the response body for details."
          },
          "400": {
            "description": "The request was incorrectly formatted of missing required headers or parameters.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The request was incorrectly formatted of missing required headers or parameters.",
                  "ModelState": null
                }
              }
            }
          },
          "401": {
            "description": "The provider key is not authorized.",
            "content": {
              "application/json": {
                "example": {
                  "StatusCode": 401,
                  "Message": "The provider key is not authorized."
                }
              }
            }
          },
          "403": {
            "description": "The requestor is not authorized to view the response.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "The requestor is not authorized to view the response."
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong.",
            "content": {
              "application/json": {
                "example": {
                  "Message": "Something went wrong."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "192.175.0.1"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateAttachmentRequest": {
        "type": "object",
        "description": "The attachment request POST model.",
        "additionalProperties": false,
        "properties": {
          "File": {
            "description": "Gets or sets the HttpFile.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HttpFile"
              }
            ]
          }
        }
      },
      "HttpFile": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ContentType": {
            "type": "string",
            "nullable": true
          },
          "Content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        }
      },
      "CreateLedesRequest": {
        "type": "object",
        "description": "The create ledes request model.",
        "additionalProperties": false,
        "properties": {
          "InvoicePayload": {
            "type": "string",
            "description": "Gets or sets the invoice payload",
            "nullable": true
          },
          "OutputInvoiceType": {
            "description": "Gets or sets the expected Ledes output type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/InvoiceType"
              }
            ]
          },
          "CallType": {
            "description": "Gets or sets the call type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallType"
              }
            ]
          }
        }
      },
      "InvoiceType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UBF",
          "MultipleInvoiceUBF",
          "TimeEntryInvoice",
          "ESF",
          "LEDES",
          "TimeEntryESF",
          "Ledes98B",
          "Ledes98BI",
          "Ledes98BIV2",
          "Ledes2000",
          "LedesXml20",
          "LedesXml21"
        ],
        "enum": [
          "UBF",
          "MultipleInvoiceUBF",
          "TimeEntryInvoice",
          "ESF",
          "LEDES",
          "TimeEntryESF",
          "Ledes98B",
          "Ledes98BI",
          "Ledes98BIV2",
          "Ledes2000",
          "LedesXml20",
          "LedesXml21"
        ]
      },
      "CallType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Final",
          "Preview"
        ],
        "enum": [
          "Final",
          "Preview"
        ]
      },
      "PostSearchRequest": {
        "type": "object",
        "description": "The model to create a search request.",
        "additionalProperties": false,
        "properties": {
          "PayorOrgId": {
            "type": "string",
            "description": "Gets or sets an id of the payor org.",
            "nullable": true
          },
          "PayorOrgEbillingId": {
            "type": "integer",
            "description": "Gets or sets an id of the ebilling payor org.",
            "format": "int32",
            "nullable": true
          },
          "SubmissionId": {
            "type": "array",
            "description": "Gets or sets an array of submission request ids.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "InvoiceId": {
            "type": "array",
            "description": "Gets or sets an array of producer invoice ids.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "MatterId": {
            "type": "array",
            "description": "Gets or sets an array of matter ids.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "StartDate": {
            "type": "string",
            "description": "Gets or sets a start date edge after which the invoice was submitted.",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Gets or sets an end date edge before which the invoice was submitted.",
            "format": "date-time",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Gets or sets a value whether the result selection will contain only invoices in active state.",
            "nullable": true
          }
        }
      },
      "UpdateStatusDetailsRequest": {
        "type": "object",
        "description": "The update status details request.",
        "additionalProperties": false,
        "required": [
          "Status"
        ],
        "properties": {
          "Status": {
            "type": "string",
            "description": "Gets or sets the status.",
            "minLength": 1
          },
          "Comment": {
            "type": "string",
            "description": "Gets or sets the comment.",
            "nullable": true
          }
        }
      },
      "AssociateSubmissionAttachmentRequest": {
        "type": "object",
        "description": "The invoice attachment post request.",
        "additionalProperties": false,
        "required": [
          "AttachmentId"
        ],
        "properties": {
          "AttachmentId": {
            "type": "string",
            "description": "Gets or sets an id returned in response from Attachment API POST request.",
            "format": "guid",
            "minLength": 1
          },
          "AssociatedElementType": {
            "description": "Gets or sets a type of invoice’s node that the attachment is related to.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssociatedElementType"
              }
            ]
          },
          "AssociatedElementId": {
            "type": "string",
            "description": "Gets or sets an identifier of invoice’s node that the attachment is related to.",
            "nullable": true
          }
        }
      },
      "AssociatedElementType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invoice",
          "Fee",
          "Expense"
        ],
        "enum": [
          "Invoice",
          "Fee",
          "Expense"
        ]
      },
      "CreateSubmissionRequestRequest": {
        "type": "object",
        "description": "The submission request model.",
        "additionalProperties": false,
        "properties": {
          "InvoicePayload": {
            "type": "string",
            "description": "Gets or sets the invoice payload",
            "nullable": true
          },
          "InvoiceType": {
            "description": "Gets or sets type of the submitting invoice.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/InvoiceType"
              }
            ]
          },
          "InvoiceState": {
            "description": "Gets or sets type of the submitting invoice state.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/InvoiceState"
              }
            ]
          }
        }
      },
      "InvoiceState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Proforma",
          "FinalInvoice"
        ],
        "enum": [
          "Proforma",
          "FinalInvoice"
        ]
      }
    }
  }
}