<policies>
    <inbound>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <set-variable name="body" value="@{
              JObject validationRequest = null;
              try
              {
               validationRequest = context.Response.Body.As<JObject>();
              }
              catch(Exception)
              {
               return context.Request.Body == null ? string.Empty : context.Response.Body.As<string>();
              }
              
              if(context.Response.StatusCode == 200 && validationRequest["ValidatedInvoiceUrl"] != null && !string.IsNullOrEmpty((string) validationRequest["ValidatedInvoiceUrl"]))
              {
               var validatedInvoiceBlobURI = (string) validationRequest["ValidatedInvoiceUrl"];
               var validatedInvoiceBlobURISegments = validatedInvoiceBlobURI.Split('/');
               var validatedInvoiceId = validatedInvoiceBlobURISegments[validatedInvoiceBlobURISegments.Length - 1];
               if(validatedInvoiceId.Contains("?"))
               {
                validatedInvoiceId = validatedInvoiceId.Split('?')[0];
               }  
               
               var currentOperationSegments = context.Operation.UrlTemplate.Split('/');
               var apiPrefix = currentOperationSegments[1];
               var apiVersion = currentOperationSegments[2];
               
               validationRequest["ValidatedInvoiceUrl"] = string.Format("{0}://{1}{2}/{3}/{4}/validatedinvoice/{5}",
                                context.Request.OriginalUrl.Scheme,
                                context.Request.OriginalUrl.Host,
                                context.Api.Path,
                                apiPrefix,
                                apiVersion,
                                validatedInvoiceId); 
              }
              
              return validationRequest.ToString();
             }" />
                <set-body>@((string)context.Variables["body"])</set-body>
            </when>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>