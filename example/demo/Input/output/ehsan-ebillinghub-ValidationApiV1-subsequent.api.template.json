{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ApimServiceName": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "properties": {
        "subscriptionKeyParameterNames": {
          "header": "ProviderKey",
          "query": "ProviderKey"
        },
        "apiRevision": "1",
        "apiVersion": "v1",
        "isCurrent": true,
        "apiVersionSetId": "[resourceId('Microsoft.ApiManagement/service/apiVersionSets', parameters('ApimServiceName'), 'ValidationApiVersionSet')]",
        "subscriptionRequired": true,
        "displayName": "ValidationApiV1",
        "path": "validation",
        "protocols": [
          "http",
          "https"
        ]
      },
      "name": "[concat(parameters('ApimServiceName'), '/ValidationApiV1')]",
      "apiVersion": "2019-01-01",
      "dependsOn": []
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/policies",
      "properties": {
        "value": "<policies>\r\n    <inbound>\r\n        <base />\r\n\t\t<set-backend-service backend-id=\"ValidationBackend\" />\r\n        <set-variable name=\"OperationId\" value=\"@(System.Guid.NewGuid().ToString())\" />\r\n        <set-header name=\"OperationId\" exists-action=\"override\">\r\n            <value>@(((string)context.Variables[\"OperationId\"]))</value>\r\n        </set-header>\r\n        <choose>\r\n            <when condition=\"@(!string.IsNullOrWhiteSpace(context.User.Note))\">\r\n                <set-header name=\"Provider\" exists-action=\"override\">\r\n                    <value>@(context.User.Note)</value>\r\n                </set-header>\r\n            </when>\r\n        </choose>\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n        <choose>\r\n            <when condition=\"@(context.Variables.ContainsKey(\"OperationId\"))\">\r\n                <set-header name=\"OperationId\" exists-action=\"override\">\r\n                    <value>@(((string)context.Variables[\"OperationId\"]))</value>\r\n                </set-header>\r\n            </when>\r\n        </choose>\r\n    </on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/ValidationApiV1/policy')]",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'ValidationApiV1')]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "properties": {
        "value": "<policies>\r\n    <inbound>\r\n        <base />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n        <set-header name=\"Location\" exists-action=\"override\">\r\n            <value>@{\r\n\t\t\t\tvar locationHeader = context.Response.Headers.GetValueOrDefault(\"Location\", \"\");\r\n\t\t\t\tif(!String.IsNullOrWhiteSpace(locationHeader)){\r\n\t\t\t\tvar location = new Uri(locationHeader);\r\n\t\t\t\treturn    string.Format(\"{0}://{1}{2}{3}\",context.Request.OriginalUrl.Scheme,\r\n\t\t\t\tcontext.Request.OriginalUrl.Host,\r\n\t\t\t\tcontext.Api.Path,\r\n\t\t\t\tlocation.PathAndQuery);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\treturn  \"\"\t;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t}</value>\r\n        </set-header>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/ValidationApiV1/ValidationRequest_Post/policy')]",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'ValidationApiV1')]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "properties": {
        "value": "<policies>\r\n    <inbound>\r\n        <base />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n        <choose>\r\n            <when condition=\"@(context.Response.StatusCode == 200)\">\r\n                <set-variable name=\"body\" value=\"@{\r\n              JObject validationRequest = null;\r\n              try\r\n              {\r\n               validationRequest = context.Response.Body.As<JObject>();\r\n              }\r\n              catch(Exception)\r\n              {\r\n               return context.Request.Body == null ? string.Empty : context.Response.Body.As<string>();\r\n              }\r\n              \r\n              if(context.Response.StatusCode == 200 && validationRequest[\"ValidatedInvoiceUrl\"] != null && !string.IsNullOrEmpty((string) validationRequest[\"ValidatedInvoiceUrl\"]))\r\n              {\r\n               var validatedInvoiceBlobURI = (string) validationRequest[\"ValidatedInvoiceUrl\"];\r\n               var validatedInvoiceBlobURISegments = validatedInvoiceBlobURI.Split('/');\r\n               var validatedInvoiceId = validatedInvoiceBlobURISegments[validatedInvoiceBlobURISegments.Length - 1];\r\n               if(validatedInvoiceId.Contains(\"?\"))\r\n               {\r\n                validatedInvoiceId = validatedInvoiceId.Split('?')[0];\r\n               }  \r\n               \r\n               var currentOperationSegments = context.Operation.UrlTemplate.Split('/');\r\n               var apiPrefix = currentOperationSegments[1];\r\n               var apiVersion = currentOperationSegments[2];\r\n               \r\n               validationRequest[\"ValidatedInvoiceUrl\"] = string.Format(\"{0}://{1}{2}/{3}/{4}/validatedinvoice/{5}\",\r\n                                context.Request.OriginalUrl.Scheme,\r\n                                context.Request.OriginalUrl.Host,\r\n                                context.Api.Path,\r\n                                apiPrefix,\r\n                                apiVersion,\r\n                                validatedInvoiceId); \r\n              }\r\n              \r\n              return validationRequest.ToString();\r\n             }\" />\r\n                <set-body>@((string)context.Variables[\"body\"])</set-body>\r\n            </when>\r\n        </choose>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/ValidationApiV1/ValidationRequest_Get/policy')]",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'ValidationApiV1')]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "properties": {
        "value": "<policies>\r\n    <inbound>\r\n        <base />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n        <choose>\r\n            <when condition=\"@(context.Response.StatusCode == 404)\">\r\n                <set-body />\r\n            </when>\r\n            <otherwise>\r\n                <set-variable name=\"validatedInvoiceSAS\" value=\"@(context.Response.Body.As<string>())\" />\r\n                <set-variable name=\"OperationId\" value=\"@(context.Response.Headers.GetValueOrDefault(\"OperationId\",\"\"))\" />\r\n                <send-request mode=\"new\" response-variable-name=\"validatedInvoice\" timeout=\"60\" ignore-error=\"false\">\r\n                    <set-url>@(((string)context.Variables[\"validatedInvoiceSAS\"]))</set-url>\r\n                    <set-method>GET</set-method>\r\n                </send-request>\r\n                <set-body>@(((IResponse)context.Variables[\"validatedInvoice\"]).Body.As<string>())</set-body>\r\n                <choose>\r\n                    <when condition=\"@(context.Response.StatusCode == 500)\">\r\n                        <set-header name=\"OperationId\" exists-action=\"override\">\r\n                            <value>@(((string)context.Variables[\"OperationId\"]))</value>\r\n                        </set-header>\r\n                    </when>\r\n                    <when condition=\"@(((IResponse)context.Variables[\"validatedInvoice\"]).StatusCode == 404)\">\r\n                        <set-status code=\"@(((IResponse)context.Variables[\"validatedInvoice\"]).StatusCode)\" reason=\"Not Found\" />\r\n                        <set-body />\r\n                    </when>\r\n                    <when condition=\"@(((IResponse)context.Variables[\"validatedInvoice\"]).StatusCode != 200 && ((IResponse)context.Variables[\"validatedInvoice\"]).StatusCode != 404)\">\r\n                        <set-status code=\"500\" reason=\"Internal Server Error\" />\r\n                        <set-body />\r\n                    </when>\r\n                </choose>\r\n                <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                    <value>application/xml; charset=utf-8</value>\r\n                </set-header>\r\n            </otherwise>\r\n        </choose>\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/ValidationApiV1/ValidatedInvoiceUri_Get/policy')]",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'ValidationApiV1')]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/apis",
      "properties": {},
      "name": "[concat(parameters('ApimServiceName'), '/BusinessPkg1/ValidationApiV1')]",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'ValidationApiV1')]"
      ]
    }
  ]
}